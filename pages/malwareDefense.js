// pages/malwareDefense.js
export function init() {
    console.log('🔧 malwareDefense.init()');

    // ─── DOM REFS ─────────────────────────────────────────────
    const container = document.getElementById('malware-defense');
    const quickBtn = document.getElementById('md-quick');
    const fullBtn = document.getElementById('md-full');
    const folderBtn = document.getElementById('md-folder-btn');
    const folderInput = document.getElementById('md-folder-input');
    const output = document.getElementById('md-output');
    const progressWrap = document.querySelector('#malware-defense .progress-container');
    const progressFill = document.querySelector('#malware-defense .progress-fill');

    // ─── PROGRESS HELPERS ─────────────────────────────────────
    function startProgress(duration) {
        container.classList.add('md-scanning');
        progressWrap.classList.remove('hidden');
        progressFill.style.animation = 'none';
        void progressFill.offsetWidth;
        progressFill.style.animation = `fillProgress ${duration} linear forwards`;
    }
    function stopProgress() {
        container.classList.remove('md-scanning');
        progressWrap.classList.add('hidden');
    }

    // ─── CORE SCAN LOGIC ───────────────────────────────────────
    async function handleMode(mode, target) {
        // 0) hide “no scans yet” placeholder
        document.getElementById('md-empty')?.classList.add('hidden');

        // 1) clear previous output + mark loading
        output.innerHTML = '';
        container.classList.add('loading');

        // 2) show the bar immediately
        progressWrap.classList.remove('hidden');
        progressFill.style.width = '0%';

        // 3) give the browser a frame to actually render the bar
        await new Promise(requestAnimationFrame);

        // 4) grab your dynamic estimate (in seconds)
        let secs = 30;
        try {
            secs = await window.defenderAPI.getScanEstimate(mode, target);
        } catch (e) {
            console.warn('Estimate failed, using 30s fallback', e);
        }
        // add 5% buffer
        secs = Math.round(secs * 1.05);
        console.log(`⏱ [${mode}] running for ~${secs}s`);

        // 5) kick off the manual timer drive
        const durationMs = secs * 1000;
        const startTime = Date.now();
        let lastPct = 0;

        const timer = setInterval(() => {
            const elapsed = Date.now() - startTime;
            const pct = Math.min((elapsed / durationMs) * 100, 100);
            if (pct > lastPct + 0.5) {
                progressFill.style.width = pct + '%';
                lastPct = pct;
            }
        }, 100);

        // 6) run the real scan
        let rawOutput = '';
        try {
            rawOutput = (mode === 'folder')
                ? await window.defenderAPI.run('folder', target)
                : await window.defenderAPI.run(mode);
        } catch (err) {
            console.error('❌ scan error:', err);
            rawOutput = err.toString();
        }

        // 7) scan done → finish the bar
        clearInterval(timer);
        progressFill.style.width = '100%';

        // small pause so user can register 100%
        await new Promise(r => setTimeout(r, 200));

        // 8) hide bar + clear loading state
        progressWrap.classList.add('hidden');
        container.classList.remove('loading');

        // 9) parse & show results
        const lines = rawOutput
            .split(/\r?\n/)
            .map(l => l.trim())
            .filter(l => l && !/scan\s+completed/i.test(l));

        if (lines.length === 0) {
            output.innerHTML = `<div class="health-log success">✅ No threats found</div>`;
        } else {
            output.innerHTML = `
      <div class="health-log warning">⚠️ ${lines.length} threat${lines.length > 1 ? 's' : ''} detected:</div>
      <ul class="threat-list">
        ${lines.map(l => `<li>${l}</li>`).join('')}
      </ul>`;
        }
    }


    // ─── BUTTON WIRING ─────────────────────────────────────────
    function attach(mode, btn) {
        if (!btn) return;
        btn.addEventListener('click', () => {
            if (mode === 'folder') folderInput.click();
            else handleMode(mode);
        });
    }
    attach('quick', quickBtn);
    attach('full', fullBtn);
    attach('folder', folderBtn);

    // folder picker
    folderInput.addEventListener('change', () => {
        const file = folderInput.files[0];
        if (file) handleMode('folder', file.path);
    });
}
