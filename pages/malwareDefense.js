// pages/malwareDefense.js
export function init() {
    const container = document.getElementById('malware-defense');
    const actions = container.querySelectorAll('.scan-action[data-mode]');
    const folderInput = container.querySelector('#md-folder-input');
    const loader = container.querySelector('#md-loader');
    const output = container.querySelector('#md-output');
    const progressWrap = container.querySelector('.progress-container');
    const progressFill = container.querySelector('.progress-fill');
    const realtimeIcon = container.querySelector('#md-realtime-icon');

    // fallback durations
    const durations = {
        quick: '20s',
        folder: '30s',
        update: '15s'
    };

    function setLoading(on) {
        loader.classList.toggle('hidden', !on);
        container.classList.toggle('loading', on);
    }

    function startProgress(mode, duration) {
        container.classList.add('md-scanning');
        progressWrap.classList.remove('hidden');
        progressFill.style.animation = 'none';
        progressFill.offsetWidth; // reflow
        progressFill.style.setProperty('--scan-duration', duration);
        progressFill.style.animation = null;
    }

    function stopProgress() {
        container.classList.remove('md-scanning');
        progressWrap.classList.add('hidden');
    }

    async function estimateFullScanSeconds() {
        const bytes = await window.defenderAPI.getDiskBytes();
        const mb = bytes / (1024 * 1024);
        const rateMBps = 100;                // adjust to real throughput
        const secs = mb / rateMBps;
        return Math.max(60, Math.round(secs)); // at least 60s
    }

    async function handleMode(mode, target) {
        let apiMode = mode;
        if (mode === 'realtime') {
            const isOn = realtimeIcon.src.includes('real_time_on.png');
            apiMode = isOn ? 'realtime-off' : 'realtime-on';
        }
        const isRealtime = apiMode.startsWith('realtime');

        setLoading(true);
        output.textContent = '';

        if (!isRealtime) {
            let dur;
            if (mode === 'full') {
                const secs = await estimateFullScanSeconds();
                dur = `${secs}s`;
            } else {
                dur = durations[mode] || '40s';
            }
            startProgress(mode, dur);
        }

        try {
            let result;
            if (apiMode === 'folder') {
                result = await window.defenderAPI.run('folder', target);
            } else {
                result = await window.defenderAPI.run(apiMode);
            }

            if (apiMode === 'realtime-on') {
                realtimeIcon.src = 'icons/Real_time_on.png';
            } else if (apiMode === 'realtime-off') {
                realtimeIcon.src = 'icons/real_time_off.png';
            }

            if (isRealtime) {
                output.textContent = result.trim();
                setLoading(false);
            } else {
                progressFill.addEventListener('animationend', () => {
                    stopProgress();
                    output.textContent = 'âœ… Scan complete!';
                    setLoading(false);
                }, { once: true });
            }
        } catch (err) {
            if (!isRealtime) stopProgress();
            setLoading(false);
            output.textContent = 'Error: ' + (err.message || err);
        }
    }

    actions.forEach(action => {
        const mode = action.dataset.mode;
        action.addEventListener('click', () => {
            if (mode === 'folder') folderInput.click();
            else handleMode(mode);
        });
    });
    folderInput.addEventListener('change', () => {
        if (folderInput.files.length) {
            handleMode('folder', folderInput.files[0].path);
        }
    });
}
