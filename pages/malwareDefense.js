const emptyState = document.getElementById('md-empty');

// File: pages/malwareDefense.js

// Single-invoke Defender UI with inline loader and full logs display
let initialized = false;
export function init() {
    if (initialized) return;
    initialized = true;

    // UI elements
    const emptyState = document.getElementById('md-empty');
    const btnUpdate = document.getElementById('md-update');
    const btnQuick = document.getElementById('md-quick');
    const btnFull = document.getElementById('md-full');
    const btnFolder = document.getElementById('md-folder-btn');
    const btnToggle = document.getElementById('md-toggle-realtime');
    const folderInput = document.getElementById('md-folder-input');
    const loader = document.getElementById('md-loader');
    const outputArea = document.getElementById('md-output');
    let realtimeOn = true;

    // Log a message to the output area
    function log(msg) {
        // hide the empty‐state graphic when the first real message arrives
        if (emptyState.style.display !== 'none') {
            emptyState.style.display = 'none';
        }

        const line = document.createElement('div');
        line.textContent = msg;
        outputArea.appendChild(line);
        outputArea.scrollTop = outputArea.scrollHeight;
    }

    // Show or hide the loader and disable/enable buttons
    function setLoading(running) {
        [btnUpdate, btnQuick, btnFull, btnFolder, btnToggle]
            .forEach(b => b.disabled = running);
        loader.style.display = running ? 'inline-block' : 'none';
    }

    // Run a Defender command and display full logs line-by-line
    async function run(mode, target) {
        // 1) clear old logs…
        outputArea.innerHTML = '';
        // 2) show the empty‐state graphic until the first log()
        emptyState.style.display = 'block';

        log(`> ${mode}${target ? ' ' + target : ''}`);
        setLoading(true);
        try {
            const result = await window.defenderAPI.run(mode, target);
            // Split output into lines and log each
            result.split(/\r?\n/).forEach(line => {
                if (line.trim()) log(line);
            });
        } catch (e) {
            log(`❌ Error: ${e.message}`);
        }
        log(`🔚 Completed ${mode}`);
        setLoading(false);
    }

    // Button event bindings
    btnUpdate.onclick = () => run('update');
    btnQuick.onclick = () => run('quick');
    btnFull.onclick = () => run('full');
    btnFolder.onclick = () => folderInput.click();
    folderInput.onchange = () => {
        const file = folderInput.files[0];
        if (file) run('folder', file.path);
    };
    btnToggle.onclick = () => {
        run(realtimeOn ? 'realtime-off' : 'realtime-on');
        realtimeOn = !realtimeOn;
        btnToggle.textContent = realtimeOn
            ? 'Turn Real-Time OFF'
            : 'Turn Real-Time ON';
    };

    // Initialize state
    outputArea.innerHTML = '';
    setLoading(false);
}
